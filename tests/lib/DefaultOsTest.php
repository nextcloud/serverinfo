<?php
/**
 * @copyright Copyright (c) 2020 Daniel Kesselberg <mail@danielkesselberg.de>
 *
 * @author Daniel Kesselberg <mail@danielkesselberg.de>
 *
 * @license GNU AGPL version 3 or any later version
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as
 * published by the Free Software Foundation, either version 3 of the
 * License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program. If not, see <http://www.gnu.org/licenses/>.
 *
 */

namespace OCA\ServerInfo\Tests;

use OCA\ServerInfo\OperatingSystems\DefaultOs;
use OCA\ServerInfo\Resources\Disk;
use OCA\ServerInfo\Resources\Memory;
use PHPUnit\Framework\MockObject\MockObject;
use Test\TestCase;

/**
 * Class DefaultOsTest
 *
 * @package OCA\ServerInfo\Tests
 */
class DefaultOsTest extends TestCase {

	/** @var DefaultOs|MockObject */
	protected $os;

	protected function setUp(): void {
		parent::setUp(); // TODO: Change the autogenerated stub

		$this->os = $this->getMockBuilder(DefaultOs::class)
			->disableOriginalConstructor()
			->disableOriginalClone()
			->disableArgumentCloning()
			->disallowMockingUnknownTypes()
			->setMethods(['readContent', 'executeCommand'])
			->getMock();
	}

	public function testGetMemory(): void {
		$this->os->method('readContent')
			->with('/proc/meminfo')
			->willReturn(file_get_contents(__DIR__ . '/../data/meminfo'));

		$memory = $this->os->getMemory();

		$this->assertEquals(15947, $memory->getMemTotal());
		$this->assertEquals(2386, $memory->getMemFree());
		$this->assertEquals(7495, $memory->getMemAvailable());
		$this->assertEquals(975, $memory->getSwapTotal());
		$this->assertEquals(896, $memory->getSwapFree());
	}

	public function testGetMemoryNoData(): void {
		$this->os->method('readContent')
			->with('/proc/meminfo')
			->willThrowException(new \RuntimeException('Unable to read: "/proc/meminfo"'));

		$this->assertEquals(new Memory(), $this->os->getMemory());
	}

	public function testGetMemoryInvalidData(): void {
		$this->os->method('readContent')
			->with('/proc/meminfo')
			->willReturn('invalid_data');

		$this->assertEquals(new Memory(), $this->os->getMemory());
	}

	public function testGetCPUName(): void {
		$this->os->method('readContent')
			->with('/proc/cpuinfo')
			->willReturn(file_get_contents(__DIR__ . '/../data/cpuinfo'));

		$this->assertEquals('Intel(R) Core(TM) i5-6500 CPU @ 3.20GHz (4 cores)', $this->os->getCpuName());
	}

	public function testGetCPUNameOneCore(): void {
		$this->os->method('readContent')
			->with('/proc/cpuinfo')
			->willReturn(file_get_contents(__DIR__ . '/../data/cpuinfo_one_core'));

		$this->assertEquals('Intel(R) Core(TM) i5-6500 CPU @ 3.20GHz (1 core)', $this->os->getCpuName());
	}

	public function testGetCPUNameNoData(): void {
		$this->os->method('readContent')
			->with('/proc/cpuinfo')
			->willThrowException(new \RuntimeException('Unable to read: "/proc/cpuinfo"'));

		$this->assertEquals('Unknown Processor', $this->os->getCpuName());
	}

	public function testGetCPUNameInvalidData(): void {
		$this->os->method('readContent')
			->with('/proc/cpuinfo')
			->willReturn('invalid_data');

		$this->assertEquals('Unknown Processor', $this->os->getCpuName());
	}

	public function testGetUptime(): void {
		$this->os->method('readContent')
			->with('/proc/uptime')
			->willReturn(file_get_contents(__DIR__ . '/../data/uptime'));

		$this->assertEquals(13278, $this->os->getUptime());
	}

	public function testGetUptimeNoData(): void {
		$this->os->method('readContent')
			->with('/proc/uptime')
			->willThrowException(new \RuntimeException('Unable to read: "/proc/uptime"'));

		$this->assertEquals(-1, $this->os->getUptime());
	}

	public function testGetDiskInfo(): void {
		$this->os->method('executeCommand')
			->with('df -TPk')
			->willReturn(file_get_contents(__DIR__ . '/../data/df_tp'));

		$disk1 = new Disk();
		$disk1->setDevice('/dev/mapper/homestead--vg-root');
		$disk1->setFs('ext4');
		$disk1->setUsed(6060);
		$disk1->setAvailable(46212);
		$disk1->setPercent('12%');
		$disk1->setMount('/');

		$disk2 = new Disk();
		$disk2->setDevice('/dev/mapper/homestead--vg-mysql--master');
		$disk2->setFs('ext4');
		$disk2->setUsed(251);
		$disk2->setAvailable(60451);
		$disk2->setPercent('1%');
		$disk2->setMount('/homestead-vg/master');

		$disk3 = new Disk();
		$disk3->setDevice('vagrant');
		$disk3->setFs('vboxsf');
		$disk3->setUsed(600421);
		$disk3->setAvailable(335246);
		$disk3->setPercent('65%');
		$disk3->setMount('/vagrant');

		$disk4 = new Disk();
		$disk4->setDevice('home_vagrant_code');
		$disk4->setFs('vboxsf');
		$disk4->setUsed(600421);
		$disk4->setAvailable(335246);
		$disk4->setPercent('65%');
		$disk4->setMount('/home/vagrant/code');

		$disk5 = new Disk();
		$disk5->setDevice('nfs.example.com:/export');
		$disk5->setFs('nfs4');
		$disk5->setUsed(0);
		$disk5->setAvailable(1);
		$disk5->setPercent('0%');
		$disk5->setMount('/nfs');

		$this->assertEquals([$disk1, $disk2, $disk3, $disk4, $disk5], $this->os->getDiskInfo());
	}

	public function testGetDiskInfoNoCommandOutput(): void {
		$this->os->method('executeCommand')
			->with('df -TP')
			->willThrowException(new \RuntimeException('No output for command "df -TP"'));

		$this->assertEquals([], $this->os->getDiskInfo());
	}

	public function testGetDiskInfoInvalidCommandOutput(): void {
		$this->os->method('executeCommand')
			->with('df -TP')
			->willReturn('invalid_data');

		$this->assertEquals([], $this->os->getDiskInfo());
	}

	public function testSupported(): void {
		$this->assertTrue($this->os->supported());
	}
}
